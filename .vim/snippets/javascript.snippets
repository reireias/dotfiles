# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet cl "console.log" b
console.log($0)
endsnippet

snippet reduce "sum of array" i
reduce((s, e) => s + e, 0)
endsnippet

snippet sort "sort array" i
sort((a, b) => a-b)
endsnippet

snippet yes "output 'Yes'" b
console.log('Yes')
endsnippet

snippet no "output 'No'" b
console.log('No')
endsnippet

snippet args "split and parseInt" b
args[0].split(' ').map(x => parseInt(x))
endsnippet

snippet fori "for loop with i" b
for (let i = 0; i < ${1:n}; i++) {
  $0
}
endsnippet

snippet forj "for loop with j" b
for (let j = 0; j < ${1:n}; j++) {
  $0
}
endsnippet

snippet forij "for loop with i, j" b
for (let i = 0; i < ${1:n}; i++) {
  for (let j = 0; j < ${2:m}; j++) {
    $0
  }
}
endsnippet

snippet map "count with map" b
const map = {}
for (let i = 0; i < ${1:n}; i++) {
  if (!map[${2:s}[i]]) map[$2[i]] = 0
  map[$2[i]]++
}
endsnippet

snippet block "split same charactor block" b
const block = s.match(/(.)\1*/g)
endsnippet

snippet array "initialize n * m array" b
const array = Array.from(new Array(${1:n}), _ => new Array(${2:m}).fill(${3:0}))
endsnippet

snippet atoz "a to z" b
const atoz = 'abcdefghijklmnopqrstuvwxyz'
endsnippet
